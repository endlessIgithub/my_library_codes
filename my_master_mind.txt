#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>
#include <unistd.h>

#define CODE_LENGTH 4

// Function to generate a random secret code
void generate_secret_code(char *code) {
    static const char colors[] = "012345678";
    int i;
    srand(time(NULL));
    for (i = 0; i < CODE_LENGTH; i++) {
    int index = rand() % strlen(colors);
    code[i] = colors[index];
    }
    printf("Secret code is (%s)", code);
    }

// Function to validate the user's guess
bool validate_guess(const char *guess) {
    if (strlen(guess) != CODE_LENGTH) {
        return true;
    }for(int i = 0; i < CODE_LENGTH; i++){
        for(int j = i + 1; j < CODE_LENGTH; j++){
            if(guess[i] == guess[j]){
                return true;
            }
        }
    }
    for (int i = 0; i < CODE_LENGTH; i++) {
        if (guess[i] < '0' || guess[i] > '8') {
            return true;
        }
    }
    return false;
}

// Function to compare two codes and return the number of well placed and misplaced pieces
void compare_codes(const char *secret, const char *guess, int *well_placed, int *misplaced) {
    *well_placed = 0;
    *misplaced = 0;
    for (int i = 0; i < CODE_LENGTH; i++) {
        if (guess[i] == secret[i]) {
            (*well_placed)++;
        }
    }
    for (int i = 0; i < CODE_LENGTH; i++) {
        for (int j = 0; j < CODE_LENGTH; j++) {
            if (guess[i] == secret[j]) {
                (*misplaced)++;
                break;
            }
        }
    }*misplaced = *misplaced - *well_placed;
}
//Function to check the number that given with the option -c and -t
int option_c_t_check(char* secret){
    for(int i = 0; i < secret[i]; i++){
        if(secret[i] >= '0' && secret[i] < '9'){
            for(int j = i + 1; j < secret[j]; j++){
                if((secret[i] == secret[j]) && (secret[j] >= '0' && secret[j] < '9')){
                // printf("aaaaaaa\n");
                    return 1;
                }
            }
        }
        else return 1;
    }
    return 0;
}
//Function to read guesses from terminal
char* read_func(char* guess){
    int read_count = 0, is_ctrl_d;
    char c;
    while ((is_ctrl_d = read(0, &c, 1)) != 0) {
        if(c == '\n'){
            break;
        }
        guess[read_count++] = c;
    }
    if(is_ctrl_d == 0){
        return 0;
    }
    return guess;
}
// Function to print a result message based on the number of well placed and misplaced pieces
void print_result_message(int well_placed, int misplaced) {
    printf("Well placed pieces: %d\nMisplaced pieces: %d\n", well_placed, misplaced);
}

int main(int argc, char **argv) {
    int attempts = 10;
    char* secret = calloc(CODE_LENGTH + 1, sizeof(char));
    bool code_specified = false;
    bool game_over = false;
    if (argc >= 2) {
        for (int i = 1; i < argc; i += 2) {
            if (strcmp(argv[i], "-c") == 0 && strlen(argv[i + 1]) == CODE_LENGTH) {
                if(option_c_t_check(argv[i + 1])){
                    printf("Wrong secre code!\n");
                    return 0;
                }
                strcpy(secret, argv[i + 1]);
                code_specified = true;
            }
            else if (strcmp(argv[i], "-t") == 0 && strlen(argv[i + 1]) > 0) {
                if(option_c_t_check(argv[i + 1])){
                    printf("Plese check the -t options values and try again.\n");
                    return 0;
                }
                attempts = atoi(argv[i + 1]);
            }
            else {
                printf("Wrong secret/attemps number!\n");
                return 0;
            }
        }
    }
    if (!code_specified) {
        generate_secret_code(secret);
    }
    printf("Will you find the secret code?\nPlease enter a valid guess\n");
    for (int i = 0; i < attempts && !game_over; i++) {
        printf("---\nRound %d\n", i);write(1, ">", 1);
        char* guess = calloc(CODE_LENGTH + 1, sizeof(char));
        int well_placed, misplaced;
        //condition for CTRL+D
        if((guess = read_func(guess)) == 0){
            return 0;
        }
        //condition for check guess nbr
        if(validate_guess(guess)){
            printf("Wrong input!\n");
            continue;
        }
        //condition for finish
        if(strcmp(secret, guess) == 0){
            printf("Congratz! You did it!\n");
            return 0;
        }
        compare_codes(secret, guess, &well_placed, &misplaced);
        print_result_message(well_placed, misplaced);
    }
}

_______________________________________________

Makefile

CC = gcc
CFLAGS = -g -Wall -Wextra -Werror
SOURCE = my_mastermind.c
TARGET = my_mastermind

$(TARGET): $(SOURCE)
	$(CC) $(CFLAGS) -o $@ $^

.PHONY: fclean

fclean:
	@rm -r $(TARGET)

______________________________________________


Mastermind is a game composed of 9 pieces of different colors.
A secret code is then composed of 4 distinct pieces.

The player has 10 attempts to find the secret code.
After each input, the game indicates to the player the number of well placed pieces and the number of misplaced pieces.

Pieces will be '0' '1' '2' '3' '4' '5' '6' '7' '8'.

If the player finds the code, he wins, and the game stops.
A misplaced piece is a piece that is present in the secret code butthat is not in a good position.

You must read the player's input from the standard input.

Your program will also receive the following parameters:
-c [CODE]: specifies the secret code. If no code is specified, a random code will be generated.
-t [ATTEMPTS]: specifies the number of attempts; by default, the playerhas 10 attempts.